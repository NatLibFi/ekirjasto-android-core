# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

#
# Get the AAB path based on the build flavor.
#
def get_aab_path_for_flavor(flavor)
  unless is_flavor_valid(flavor)
    UI.user_error!("ERROR: Invalid flavor: #{flavor}")
  end
  return "build/outputs/bundle/#{flavor}Release/ekirjasto-#{flavor}-release.aab"
end

#
# Get the highest version code from a given release track.
#
def get_track_max_version_code(track)
  # This will throw an error if the track doesn't have any releases
  # (it's a bug in Fastlane that has open PRs, but no released fix yet)
  version_codes = google_play_track_version_codes(
    track: track,
    json_key_data: ENV["EKIRJASTO_FASTLANE_SERVICE_ACCOUNT_JSON"]
  )
  # If there were no releases in the track, return 0
  return 0 if version_codes.empty?
  # If there were releases, return the highest version code
  return version_codes.map(&:to_i).max()
end

#
# Get version name from gradle.properties.
#
def get_version_name()
  File.open("../../gradle.properties", "r") do |file|
    file.grep(/^ekirjasto\.versionName=/) do |version_line|
      return version_line.split("=")[1].strip!
    end
  end
end

#
# Get version name for Google Play.
#
def get_version_name_for_google_play(flavor)
  commit_hash = last_git_commit[:abbreviated_commit_hash]
  version_name = get_version_name()
  branch = git_branch
  if branch.empty?
    return "#{version_name} flavor:#{flavor} commit:#{commit_hash}"
  else
    return "#{version_name} flavor:#{flavor} branch:#{branch} commit:#{commit_hash}"
  end
end

#
# Check if a flavor is valid.
#
def is_flavor_valid(flavor)
  return ["ellibs", "dev", "beta", "production"].include?(flavor)
end

#
# Get flavor from options.
#
def options_flavor(options)
  return (options[:flavor] ? options[:flavor] : "production")
end


# Uncomment the line if you want fastlane to automatically update itself
#update_fastlane

default_platform(:android)

platform :android do
  desc "Get the highest current version code in Google Play"
  lane :get_google_play_version_code do
    # Get the highest version code from any of the release tracks
    version_code_max = [
      get_track_max_version_code("internal"),
      get_track_max_version_code("alpha"),
      get_track_max_version_code("closed-beta"),
      #get_track_max_version_code("beta"),
      get_track_max_version_code("production")
    ].max()
    # Print version code for easy shell capturing
    puts "\n\nGOOGLE_PLAY_VERSION_CODE=#{version_code_max}\n"
  end

  desc "Deploy a new release to Google Play internal testing"
  lane :deploy_internal do |options|
    flavor = options_flavor(options)
    puts "Flavor: #{flavor}"
    version_name_for_google_play = get_version_name_for_google_play(flavor)
    puts "Version name for Google Play: #{version_name_for_google_play}"

    upload_to_play_store(
      aab: get_aab_path_for_flavor(flavor),
      version_name: version_name_for_google_play,
      json_key_data: ENV["EKIRJASTO_FASTLANE_SERVICE_ACCOUNT_JSON"],
      track: "internal"
    )
  end

  desc "Deploy a new release to Google Play alpha testing"
  lane :deploy_alpha do |options|
    flavor = options_flavor(options)
    puts "Flavor: #{flavor}"
    version_name_for_google_play = get_version_name_for_google_play(flavor)
    puts "Version name for Google Play: #{version_name_for_google_play}"

    upload_to_play_store(
      aab: get_aab_path_for_flavor(flavor),
      version_name: version_name_for_google_play,
      json_key_data: ENV["EKIRJASTO_FASTLANE_SERVICE_ACCOUNT_JSON"],
      # Must be manually sent to app review in Google Play Console
      changes_not_sent_for_review: true,
      track: "alpha"
    )
  end

  desc "Deploy a new release to Google Play closed beta testing"
  lane :deploy_closed_beta do |options|
    flavor = options_flavor(options)
    puts "Flavor: #{flavor}"
    version_name_for_google_play = get_version_name_for_google_play(flavor)
    puts "Version name for Google Play: #{version_name_for_google_play}"

    upload_to_play_store(
      aab: get_aab_path_for_flavor(flavor),
      version_name: version_name_for_google_play,
      json_key_data: ENV["EKIRJASTO_FASTLANE_SERVICE_ACCOUNT_JSON"],
      # Must be manually sent to app review in Google Play Console
      changes_not_sent_for_review: true,
      track: "closed-beta"
    )
  end

  desc "Deploy a new release to Google Play open beta testing"
  lane :deploy_open_beta do |options|
    flavor = options_flavor(options)
    puts "Flavor: #{flavor}"
    version_name_for_google_play = get_version_name_for_google_play(flavor)
    puts "Version name for Google Play: #{version_name_for_google_play}"

    UI.user_error!("ERROR: The closed open track is manually disabled")

    #upload_to_play_store(
    #  aab: get_aab_path_for_flavor(flavor),
    #  version_name: version_name_for_google_play,
    #  json_key_data: ENV["EKIRJASTO_FASTLANE_SERVICE_ACCOUNT_JSON"],
    #  # Must be manually sent to app review in Google Play Console
    #  changes_not_sent_for_review: true,
    #  track: "beta"
    #)
  end

  desc "Deploy a new release to Google Play production"
  lane :deploy_production do |options|
    flavor = options_flavor(options)
    puts "Flavor: #{flavor}"
    version_name_for_google_play = get_version_name_for_google_play(flavor)
    puts "Version name for Google Play: #{version_name_for_google_play}"

    if flavor != "production"
      UI.user_error!("ERROR: Only the production flavor can be uploaded to the production track")
      return
    end

    upload_to_play_store(
      aab: get_aab_path_for_flavor(flavor),
      version_name: version_name_for_google_play,
      json_key_data: ENV["EKIRJASTO_FASTLANE_SERVICE_ACCOUNT_JSON"],
      # Must be manually sent to app review in Google Play Console
      changes_not_sent_for_review: true,
      track: "production"
    )
  end
end
